% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/treeseq_sankoff.R
\name{treeseq_quadratic_mpr_minimize_discrete}
\alias{treeseq_quadratic_mpr_minimize_discrete}
\title{Assign ancestral nodes to discrete locations using quadratic parsimony costs}
\usage{
treeseq_quadratic_mpr_minimize_discrete(obj, sites)
}
\arguments{
\item{obj}{Result object from \code{\link{treeseq_quadratic_mpr}}}

\item{sites}{A numeric matrix where each row represents a possible location,
with columns corresponding to spatial dimensions (x, y, etc.) in the same
order as used in the original sample_locations}
}
\value{
An integer vector giving the index of the optimal site from the sites
  matrix for each node in the tree sequence. Indices are 1-based.
}
\description{
Uses the squared distance costs computed by \code{treeseq_quadratic_mpr} to assign 
each ancestral node to the discrete location (from a provided set) that minimizes 
the total squared distance cost needed to explain sample locations. Unlike 
\code{treeseq_quadratic_mpr_minimize}, which allows locations anywhere in continuous 
space, this function restricts assignments to a specified set of discrete locations.
}
\details{
For each node, this function evaluates the quadratic cost function computed by
\code{treeseq_quadratic_mpr} at each candidate location provided in the sites
matrix. The location achieving the minimum cost is selected as optimal for
that node.

This function is useful when ancestral locations must be restricted to a
discrete set of possibilities (e.g., habitat patches, sampling locations)
despite using a continuous-space reconstruction method.
}
\examples{
# Load example tree sequence
ts <- treeseq_load(system.file("extdata", "example.trees", package="gaia"))

# Define sample locations (3 samples in 2D space)
samples <- data.frame(
  node_id = 0:2,
  x = c(0.5, 1.25, 2.0),
  y = c(2.7, 0.41, 1.5)
)

# Define possible ancestral locations
sites <- matrix(c(
  0.5, 2.7,  # Site 1
  1.25, 0.41,  # Site 2
  2.0, 1.5  # Site 3
), ncol=2, byrow=TRUE)

# Compute squared distance costs
mpr_costs <- treeseq_quadratic_mpr(ts, samples)

# Find optimal discrete locations
location_indices <- treeseq_quadratic_mpr_minimize_discrete(mpr_costs, sites)

}
\seealso{
\code{\link{treeseq_quadratic_mpr}} for computing squared distance costs
\code{\link{treeseq_quadratic_mpr_minimize}} for continuous location assignments
}
