% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/treeseq_sankoff.R
\name{treeseq_discrete_mpr}
\alias{treeseq_discrete_mpr}
\title{Compute minimum migration costs for geographic ancestry reconstruction}
\usage{
treeseq_discrete_mpr(ts, sample_locations, cost_matrix, use_brlen = FALSE)
}
\arguments{
\item{ts}{A \code{treeseq} object, typically loaded via \code{\link{treeseq_load}}}

\item{sample_locations}{An integer matrix with two columns:
\describe{
  \item{node_id}{Node identifiers for sampled genomes (0-based indexing)}
  \item{state_id}{Geographic state assignments for samples (1-based indexing)}
}}

\item{cost_matrix}{A symmetric numeric matrix where entry [i,j] gives the migration
cost between states i and j. Must have non-negative values. Diagonal elements 
(representing costs of remaining in the same state) are ignored.}

\item{use_brlen}{Logical indicating whether to scale migration costs by inverse
branch lengths (TRUE) or treat all branches equally (FALSE, default)}
}
\value{
A list with class \code{c("discrete", "mpr")} containing:
  \describe{
    \item{mean_tree_length}{Genome-wide average migration cost}
    \item{tree_length}{Vector giving the migration cost for each local tree}
    \item{mpr}{Matrix where entry [i,j] gives the minimum migration cost needed
      to explain sample locations when node i is placed in state j}
  }
}
\description{
Uses generalized (Sankoff) parsimony to compute the minimum migration costs needed 
to explain sampled geographic locations under different possible ancestral state 
assignments. For each ancestral node and potential geographic state, calculates 
the total migration cost required to explain all sampled descendant locations when 
that ancestor is assigned to that state.
}
\details{
This function implements generalized parsimony on tree sequences using the 
algorithm of Sankoff and Rousseau (1975). It calculates minimum migration cost 
functions for each node by proceeding up the tree sequence from samples to 
ancestral nodes. These costs are then used to determine optimal geographic 
locations using \code{treeseq_discrete_mpr_minimize}.

For each non-sample node, the function computes the minimum total migration cost 
needed to explain the geographic locations of all sampled descendants under each 
possible geographic state assignment for that node. These costs are averaged 
across all base pairs in the genome that inherit from the node.

Migration costs are specified through the cost_matrix parameter. The matrix must
be symmetric and have non-negative values. Entry [i,j] gives the cost of migrating
from state i to state j. Diagonal elements are ignored since they represent the
cost of remaining in the same state, which is always 0.
}
\examples{
# Load tree sequence
ts = treeseq_load(system.file("extdata", "test.trees", package="gaia"))

# Define sample locations - nodes 0 and 2 in one state, node 1 in another
state = c(2L,1L,1L)
samples = cbind(node_id=0:2, state_id=state)

# Create cost matrix for 2 states
# Migration between states has cost 1
costs = matrix(c(0, 1, 1, 0), 2, 2)

# Compute migration costs
# Will calculate costs at nodes 3-6 based on samples 0-2
mpr_costs = treeseq_discrete_mpr(ts, samples, costs)

# Can also use branch lengths to scale costs
mpr_costs_bl = treeseq_discrete_mpr(ts, samples, costs, use_brlen=TRUE)
}
\references{
Sankoff, D. and Rousseau, P. (1975) Locating the vertices of a Steiner tree in 
arbitrary space. \emph{Mathematical Programming}, 9:240-246.
}
\seealso{
\code{\link{treeseq_discrete_mpr_minimize}} for determining optimal state assignments
\code{\link{treeseq_discrete_mpr_edge_history}} for reconstructing migration histories
\code{\link{treeseq_quadratic_mpr}} for continuous-space reconstruction
\code{\link{treeseq_linear_mpr}} for linear cost reconstruction
}
